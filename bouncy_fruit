from __future__ import division
import Tkinter # built-in Python graphics library
import random
import math

game_objects = []

class Fruit:
    def __init__(self, x, y):
        '''Create a new shape at the given x,y point with a random speed, color, and size.'''

        self.x = x
        self.y = y
        self.x_speed = random.randrange(-3,3)
        self.y_speed = random.randrange(-3,3)
        # this creates a random hex string between #000000 and #ffffff
        # we draw it with an outline, so we'll be able to see it on a white background regardless
        self.color = '#{0:0>6x}'.format(random.randint(00,16**6))
        self.size = random.randint(5,45)

    def update(self):
        '''Update current location by speed.'''

        self.y_speed += 0.7
        self.x += self.x_speed
        self.y += self.y_speed

    def floor_bounce(self):
        self.y_speed *= -1

    def wall_bounce(self):
        self.x_speed *= -1

class Orange(Fruit):

    def OJ_it_up(self):
        global game_objects
        game_objects.append(OJ(self.x, self.y, self.size))

    def draw(self, canvas):
        '''Draw self on the canvas.'''

        self.OJ_it_up()
        canvas.create_oval(self.x, self.y, self.x + self.size, self.y + self.size,
                           fill=self.color, outline="black")


class OJ:
    def __init__(self, x, y, size):
        self.x = x
        self.y = y
        self.size = size

    def draw(self, canvas):
        canvas.create_oval(self.x, self.y, self.x + self.size, self.y + self.size,
                              fill="orange", outline = "")
    def update(self):
        pass

    def floor_bounce(self):
        pass

    def wall_bounce(self):
        pass


class Banana(Fruit):

    def __init__(self, x, y):
        Fruit.__init__(self, x, y)
        self.ang_pos = random.random() * 2 * math.pi
        self.ang_vel = random.random() / 10 - 0.05

    def floor_bounce(self):
        '''determines rotational movement of banana after 
        bounce as a weighted sum of the current spin and a
        factor of the angle at which it hits the ground'''
        Fruit.floor_bounce(self)
        if 0 <= self.ang_pos%(2*math.pi) < math.pi / 2:
            self.ang_vel = self.ang_vel / 5 + (math.pi / 2 - self.ang_pos%(2*math.pi)) / math.pi
        elif math.pi/2 <= self.ang_pos%(2*math.pi) < math.pi:
            self.ang_vel = self.ang_vel / 5 - (self.ang_pos%(2*math.pi) - math.pi/2) / math.pi
        elif math.pi <= self.ang_pos%(2*math.pi) < math.pi * 3 / 2:
            self.ang_vel = self.ang_vel / 5 + (math.pi * 3 / 2 - self.ang_pos%(2*math.pi)) / math.pi
        elif math.pi * 3 / 2 <= self.ang_pos%(2*math.pi):
            self.ang_vel = self.ang_vel / 5 - (self.ang_pos%(2*math.pi) - math.pi * 3 / 2) / math.pi
        if self.ang_vel > 0.4:
            self.ang_vel = 0.4
        elif self.ang_vel < -0.4:
            self.ang_vel = -0.4

    def update(self):
        Fruit.update(self)
        self.ang_pos += self.ang_vel

    def draw(self, canvas):
        '''Draw self on the canvas.'''

        canvas.create_polygon(self.x + self.size * math.cos(self.ang_pos), self.y + self.size * math.sin(self.ang_pos), self.x + self.size * math.cos(self.ang_pos + math.pi / 6), self.y + self.size * math.sin(self.ang_pos + math.pi / 6), self.x - self.size * math.cos(self.ang_pos), self.y - self.size * math.sin(self.ang_pos), self.x - self.size * math.cos(self.ang_pos + math.pi / 6), self.y - self.size * math.sin(self.ang_pos + math.pi / 6), fill="yellow", outline="black")


def add_fruit(event):
    '''Add a new shape where the user clicked.'''

    global game_objects
    constructor = random.choice([Orange, Banana])
    game_objects.append(constructor(event.x, event.y))


def reset(event):
    '''Clear all game objects.'''

    global game_objects
    game_objects = []


def draw(canvas):
    '''Clear the canvas, have all game objects update and redraw, then set up the next draw.'''

    canvas.delete(Tkinter.ALL)

    global game_objects
    for game_object in game_objects:
        if game_object.y > 398 + game_object.size / 2:
            game_object.floor_bounce()
        if game_object.x > 400 - game_object.size / 2 or game_object.x < game_object.size / 2:
            game_object.wall_bounce()
        game_object.update()
        game_object.draw(canvas)

    delay = 20 # milliseconds, so about 30 frames per second
    canvas.after(delay, draw, canvas) # call this draw function with the canvas argument again after the delay

# this is a standard Python thing: definitions go above, and any code that will actually
# run should go into the __main__ section. This way, if someone imports the file because
# they want to use the functions or classes you've defined, it won't start running your game
# automatically
if __name__ == '__main__':

    # create the graphics root and a 400x400 canvas
    root = Tkinter.Tk()
    canvas = Tkinter.Canvas(root, width=400, height=400)
    canvas.pack()

    # if the user presses a key or the mouse, call our handlers
    root.bind('<Key-r>', reset)
    root.bind('<Button-1>', add_fruit)

    # start the draw loop
    draw(canvas)

    root.mainloop() # keep the window open
